!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["lib-resource-path"]=t():e["lib-resource-path"]=t()}("undefined"!=typeof self?self:this,(function(){return(()=>{"use strict";var e={};return(()=>{var t=e;function r(e,t,r){if(!e)throw new Error("The parameter [Resources] is required.");if(r=r||{},0===(t=t||"").length)throw new Error("This function does not operate on the path root. The parameter [Path] is required.");if(1===t.length)throw new Error("This function does not operate on namespaces. The parameter [Path] is required.");return e[t]=JSON.parse(JSON.stringify(r)),e}function n(e,t){if(!e)throw new Error("The parameter [Resources] is required.");let r={path:t=t||"",parent:"",name:"",info:null,exists:!1,inherited:{},children:[]};if(0===t.length)return r.path="",r.name="",Object.keys(e).forEach((e=>{let t=e.substr(0,1);r.children.includes(t)||r.children.push(t)})),r;let n=t.substr(0,1);if(1===t.length)return r.path="",r.name=n,Object.keys(e).forEach((e=>{let t=e.substr(0,1);if(t===n){let n=e.split(t)[1];r.children.includes(n)||r.children.push(n)}})),r;let i=t.split(n);for(i.shift();i.length>1;){r.parent+=n+i[0];let t=e[r.parent];if(void 0===t);else{if("object"!=typeof t)throw new Error(`A resource value must be an object and not [${t}].`);if(null===t);else{if(Array.isArray(t))throw new Error("A resource value must be an object and not [array].");r.inherited=s(r.inherited,t)}}i.shift()}r.name=i[0];let o=e[t];if(void 0===o);else{if("object"!=typeof o)throw new Error(`A resource value must be an object and not [${o}].`);if(r.info={},r.exists=!0,null===o);else{if(Array.isArray(o))throw new Error("A resource value must be an object and not [array].");r.inherited=s(r.inherited,o),Object.keys(o).forEach((e=>r.info[e]=o[e]))}}return Object.keys(e).forEach((e=>{if(e.startsWith(t)){let i=e.substr(t.length).split(n);if(i.shift(),i.length>0){let e=i[0];r.children.includes(e)||r.children.push(e)}}})),r}function i(e){return JSON.parse(JSON.stringify(e))}function s(e,t){let r=i(e);return function e(t,r){Object.keys(r).forEach((n=>{let s=t[n],o=r[n],a=typeof o;void 0===s?t[n]=i(o):"object"===a?Array.isArray(s)?t[n].push(...i(o)):null===o?t[n]=null:e(t[n],o):t[n]=i(o)}))}(r,t),r}function o(e,t){return 0===e.length||!(1!==e.length||!t.startsWith(e))||t===e||!!t.startsWith(e+e.substr(0,1))}function a(e,t){let r=e.find((e=>e.path===t));if(!r)for(let n=0;n<e.length&&(r=a(e[n].items,t),!r);n++);return r}t.Create=r,t.Update=function(e,t,n){return r(e,t,n)},t.Delete=function(e,t){if(!e)throw new Error("The parameter [Resources] is required.");if(0===(t=t||"").length)throw new Error("This function does not operate on the path root. The parameter [Path] is required.");if(1===t.length)throw new Error("This function does not operate on namespaces. The parameter [Path] is required.");return void 0!==e[t]&&delete e[t],e},t.Select=n,t.Locate=function(e,t){if(!e)throw new Error("The parameter [Resources] is required.");if(!t)throw new Error("The parameter [Name] is required.");let r=[];return Object.keys(e).forEach((e=>{let n=e.substr(0,1);e.split(n).includes(t)&&r.push(e)})),r.sort(),r},t.Header=function(e,t){if(!e)throw new Error("The parameter [Resources] is required.");t=t||"";let r=[];return Object.keys(e).forEach((e=>{o(t,e)&&r.push(e)})),r.sort(),r},t.Getall=function(e,t){if(!e)throw new Error("The parameter [Resources] is required.");if((t=t||{}).item_type=t.item_type?t.item_type:"info",t.list_type=t.list_type?t.list_type:"sparse",t.return_type=t.return_type?t.return_type:"map",!["info","select"].includes(t.item_type))throw new Error("Invalid option for item_type, must be one of: 'info', or 'select'.");if(!["sparse","full","tree"].includes(t.list_type))throw new Error("Invalid option for list_type, must be one of: 'sparse', 'full', or 'tree'.");if(!["array","map"].includes(t.return_type))throw new Error("Invalid option for return_type, must be one of: 'array', or 'map'.");let r=Object.keys(e);"full"!==t.list_type&&"tree"!==t.list_type||JSON.parse(JSON.stringify(r)).forEach((e=>{let t=e.substr(0,1),n=e.split(t);n.shift();let i="";n.forEach((e=>{i+=t+e,r.includes(i)||r.push(i)}))})),r.sort();let i=null;return"array"===t.return_type?i=[]:"map"===t.return_type&&(i={}),r.forEach((r=>{let s=null,o=n(e,r);"info"===t.item_type?s={path:o.path,parent:o.parent,name:o.name,info:e[r]||null}:"select"===t.item_type&&(s=o),"array"===t.return_type?i.push(s):"map"===t.return_type&&(i[r]=s)})),"tree"===t.list_type&&("array"===t.return_type?i=function(e,t,r){let i=JSON.parse(JSON.stringify(t)),s=[];return i.forEach((t=>{let i=t.path.substr(0,1),o=s.find((e=>!e.path&&e.name===i));o||("info"===r.item_type?o={path:"",parent:"",name:i,info:null}:"select"===r.item_type&&(o=n(e,i)),s.push(o),o.items=[]),""===t.parent?o.items.push(t):a(o.items,t.parent).items.push(t),t.items=[]})),s}(e,i,t):"map"===t.return_type&&(i=function(e,t,r){let i=JSON.parse(JSON.stringify(t)),s={};return Object.keys(i).forEach((t=>{let o=i[t],a=s,u=t.substr(0,1);void 0===a[u]&&("info"===r.item_type?a[u]={path:"",parent:"",name:u,info:null}:"select"===r.item_type&&(a[u]=n(e,u)),a[u].items={}),a=a[u].items;let h=o.parent.split(u);h.shift(),h.forEach(((e,t)=>{a[e],a=a[e].items})),a[o.name]=o,a[o.name].items={}})),s}(e,i,t))),i},t.Branch=function(e,t){if(!e)throw new Error("The parameter [Resources] is required.");t=t||"";let r={};return Object.keys(e).forEach((n=>{o(t,n)&&(r[n]=e[n])})),r},t.Copyto=function(e,t,r){if(!e)throw new Error("The parameter [Resources] is required.");if((t=t||"")===(r=r||""))throw new Error("The parameters [Path] and [NewPath] cannot be the same path.");let n=t.substr(0,1),i=r.substr(0,1),s=r.split(i);return Object.keys(e).forEach((r=>{if(o(t,r)){let o=r.substr(t.length).split(n);o.shift();let a=[...s,...o].join(i),u=e[r];e[a]=JSON.parse(JSON.stringify(u))}})),e},t.Moveto=function(e,t,r){if(!e)throw new Error("The parameter [Resources] is required.");if((t=t||"")===(r=r||""))throw new Error("The parameters [Path] and [NewPath] cannot be the same path.");let n=t.substr(0,1),i=r.substr(0,1),s=r.split(i);return Object.keys(e).forEach((r=>{if(o(t,r)){let o=r.substr(t.length).split(n);o.shift();let a=[...s,...o].join(i),u=e[r];e[a]=JSON.parse(JSON.stringify(u)),delete e[r]}})),e}})(),e})()}));